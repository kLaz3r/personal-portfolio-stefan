import os
import json
import math
from PIL import Image # This comes from the Pillow library

# --- Configuration ---
# 1. The folder where your images are located.
#    Use a relative path from where you run the script, or an absolute path.
IMAGE_FOLDER = './public/images'

# 2. The public path prefix for the 'src' attribute in your final array.
#    This should match how your assets are served on your website.
PUBLIC_PATH_PREFIX = '/images/'

# 3. The path and filename for the output TypeScript file.
OUTPUT_FILE = './src/photos.ts'
# --- End of Configuration ---

def generate_photo_data():
    """
    Scans a directory for images, calculates their aspect ratios,
    and generates a TypeScript file containing an array of photo objects.
    """
    photo_objects = []
    supported_extensions = ('.jpg', '.jpeg', '.png', '.webp', '.gif')
    
    # Ensure the image folder exists
    if not os.path.isdir(IMAGE_FOLDER):
        print(f"‚ùå Error: Image directory not found at '{IMAGE_FOLDER}'")
        return

    print(f"üîç Scanning for images in '{IMAGE_FOLDER}'...")

    # Iterate over files and assign a stable ID
    # Sorting ensures the order is consistent every time you run the script
    image_files = sorted([f for f in os.listdir(IMAGE_FOLDER) if f.lower().endswith(supported_extensions)])

    for index, filename in enumerate(image_files):
        file_path = os.path.join(IMAGE_FOLDER, filename)
        
        try:
            # Open the image file to get its dimensions
            with Image.open(file_path) as img:
                original_width, original_height = img.size
            
            # Calculate the greatest common divisor (GCD) to simplify the aspect ratio
            divisor = math.gcd(original_width, original_height)
            aspect_ratio_width = original_width // divisor
            aspect_ratio_height = original_height // divisor
            
            # Create the photo object as a Python dictionary
            photo = {
                'id': index + 1,
                'src': f"{PUBLIC_PATH_PREFIX}{filename}",
                'width': aspect_ratio_width * 100,
                'height': aspect_ratio_height * 100
            }
            photo_objects.append(photo)
            
            print(f"Processed {filename}: {{ width: {photo['width']}, height: {photo['height']} }}")

        except Exception as e:
            print(f"‚ö†Ô∏è Could not process file {filename}: {e}")

    # Convert the list of dictionaries to a pretty-printed JSON string
    # Python's json.dumps produces a format that is perfectly valid for a JS/TS object array
    json_string = json.dumps(photo_objects, indent=2)
    
    # Format the final TypeScript file content
    ts_content = f"""// This file is generated by a script. Do not edit manually.\n
export const photos = {json_string};
"""

    try:
        # Ensure the output directory exists
        output_dir = os.path.dirname(OUTPUT_FILE)
        if output_dir:
            os.makedirs(output_dir, exist_ok=True)
            
        # Write the content to the output file
        with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
            f.write(ts_content)
        
        print(f"\n‚úÖ Successfully generated photo array at '{OUTPUT_FILE}'")

    except Exception as e:
        print(f"‚ùå Error writing output file: {e}")


# Run the main function
if __name__ == "__main__":
    generate_photo_data()